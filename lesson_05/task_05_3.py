# 3. Есть два списка: tutors - имена учеников, groups - названия их классов. Необходимо реализовать генератор
# или функцию-генератор, возвращающий кортежи вида '(<tutor>, <group>)'.
# Техническое задание:
# 1. Функция (или генератор) должна работать со списками любой длины.
# 2. Количество генерируемых кортежей не должно быть больше длины списка tutors.
# 3. Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
# '(<tutor>, None)', например: '('Станислав', None)'
# 4. Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# 5. Генератор возвращает кортежи указанного вида.
# 6. Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# 7. Не используйте в этом задании функции zip и zip_longest.
# 8. Не меняйте исходные списки tutors и groups и не создавайте новых списков.
# 9. Подтвердите работоспособность (выведите в консоль результаты) для обоих вариантов:
# groups меньше tutors и tutors меньше groups.
# Примечание:
# 1. Сделать эту задачу через функцию-генератор проще. Если сделали, попробуйте сделать именно через
# генераторное выражение, т.е. «в одну строку».

print('Результат, где учеников меньше:\n')

tutors1 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups1 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
print('Ученики:', tutors1)
print('Классы:', groups1)

gen1 = ((tutors1[i], groups1[i]) if i < len(groups1) else (tutors1[i], None) for i in range(len(tutors1)))
print('Тип объекта:', type(gen1))

print('Все значения генератора:')
for i in range(len(tutors1)):
    print(next(gen1))

print('\nРезультат, где учеников больше:\n')

groups2 = ['9А', '7В', '9Б', '9В']
print('Ученики:', tutors1)
print('Классы:', groups2)

gen2 = ((tutors1[i], groups2[i]) if i < len(groups2) else (tutors1[i], None) for i in range(len(tutors1)))
print('Тип объекта:', type(gen2))

print('Все значения генератора:')
for i in range(len(tutors1)):
    print(next(gen2))
